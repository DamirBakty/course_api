// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "web/models"

	mock "github.com/stretchr/testify/mock"

	schemas "web/schemas"
)

// ChapterRepositoryInterface is an autogenerated mock type for the ChapterRepositoryInterface type
type ChapterRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: chapter
func (_m *ChapterRepositoryInterface) Create(chapter models.Chapter) (uint, error) {
	ret := _m.Called(chapter)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Chapter) (uint, error)); ok {
		return rf(chapter)
	}
	if rf, ok := ret.Get(0).(func(models.Chapter) uint); ok {
		r0 = rf(chapter)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(models.Chapter) error); ok {
		r1 = rf(chapter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ChapterRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCourseID provides a mock function with given fields: courseID
func (_m *ChapterRepositoryInterface) GetByCourseID(courseID uint) ([]schemas.ChapterResponseWithLessonsCount, error) {
	ret := _m.Called(courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCourseID")
	}

	var r0 []schemas.ChapterResponseWithLessonsCount
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]schemas.ChapterResponseWithLessonsCount, error)); ok {
		return rf(courseID)
	}
	if rf, ok := ret.Get(0).(func(uint) []schemas.ChapterResponseWithLessonsCount); ok {
		r0 = rf(courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schemas.ChapterResponseWithLessonsCount)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id, courseId
func (_m *ChapterRepositoryInterface) GetByID(id uint, courseId uint) (models.Chapter, error) {
	ret := _m.Called(id, courseId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Chapter
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (models.Chapter, error)); ok {
		return rf(id, courseId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) models.Chapter); ok {
		r0 = rf(id, courseId)
	} else {
		r0 = ret.Get(0).(models.Chapter)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDWithLessonsCount provides a mock function with given fields: id, courseID
func (_m *ChapterRepositoryInterface) GetByIDWithLessonsCount(id uint, courseID uint) (schemas.ChapterResponseWithLessonsCount, error) {
	ret := _m.Called(id, courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithLessonsCount")
	}

	var r0 schemas.ChapterResponseWithLessonsCount
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (schemas.ChapterResponseWithLessonsCount, error)); ok {
		return rf(id, courseID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) schemas.ChapterResponseWithLessonsCount); ok {
		r0 = rf(id, courseID)
	} else {
		r0 = ret.Get(0).(schemas.ChapterResponseWithLessonsCount)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: chapter
func (_m *ChapterRepositoryInterface) Update(chapter models.Chapter) error {
	ret := _m.Called(chapter)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Chapter) error); ok {
		r0 = rf(chapter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChapterRepositoryInterface creates a new instance of ChapterRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChapterRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChapterRepositoryInterface {
	mock := &ChapterRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
