// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "web/models"

	mock "github.com/stretchr/testify/mock"

	schemas "web/schemas"
)

// CourseRepositoryInterface is an autogenerated mock type for the CourseRepositoryInterface type
type CourseRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: course
func (_m *CourseRepositoryInterface) Create(course models.Course) (models.Course, error) {
	ret := _m.Called(course)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Course) (models.Course, error)); ok {
		return rf(course)
	}
	if rf, ok := ret.Get(0).(func(models.Course) models.Course); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Get(0).(models.Course)
	}

	if rf, ok := ret.Get(1).(func(models.Course) error); ok {
		r1 = rf(course)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *CourseRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *CourseRepositoryInterface) GetAll() ([]schemas.CourseResponseWithChaptersCount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []schemas.CourseResponseWithChaptersCount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]schemas.CourseResponseWithChaptersCount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []schemas.CourseResponseWithChaptersCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schemas.CourseResponseWithChaptersCount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *CourseRepositoryInterface) GetByID(id uint) (models.Course, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Course, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Course); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Course)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDWithChaptersCount provides a mock function with given fields: id
func (_m *CourseRepositoryInterface) GetByIDWithChaptersCount(id uint) (schemas.CourseResponseWithChaptersCount, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithChaptersCount")
	}

	var r0 schemas.CourseResponseWithChaptersCount
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (schemas.CourseResponseWithChaptersCount, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) schemas.CourseResponseWithChaptersCount); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(schemas.CourseResponseWithChaptersCount)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: course, courseRequest
func (_m *CourseRepositoryInterface) Update(course models.Course, courseRequest schemas.UpdateCourseRequest) (models.Course, error) {
	ret := _m.Called(course, courseRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Course, schemas.UpdateCourseRequest) (models.Course, error)); ok {
		return rf(course, courseRequest)
	}
	if rf, ok := ret.Get(0).(func(models.Course, schemas.UpdateCourseRequest) models.Course); ok {
		r0 = rf(course, courseRequest)
	} else {
		r0 = ret.Get(0).(models.Course)
	}

	if rf, ok := ret.Get(1).(func(models.Course, schemas.UpdateCourseRequest) error); ok {
		r1 = rf(course, courseRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCourseRepositoryInterface creates a new instance of CourseRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseRepositoryInterface {
	mock := &CourseRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
