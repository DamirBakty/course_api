// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "web/models"

	mock "github.com/stretchr/testify/mock"

	schemas "web/schemas"
)

// LessonRepositoryInterface is an autogenerated mock type for the LessonRepositoryInterface type
type LessonRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: lesson
func (_m *LessonRepositoryInterface) Create(lesson models.Lesson) (uint, error) {
	ret := _m.Called(lesson)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Lesson) (uint, error)); ok {
		return rf(lesson)
	}
	if rf, ok := ret.Get(0).(func(models.Lesson) uint); ok {
		r0 = rf(lesson)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(models.Lesson) error); ok {
		r1 = rf(lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *LessonRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByChapterID provides a mock function with given fields: chapterID, courseID
func (_m *LessonRepositoryInterface) GetByChapterID(chapterID uint, courseID uint) ([]schemas.LessonResponse, error) {
	ret := _m.Called(chapterID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetByChapterID")
	}

	var r0 []schemas.LessonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]schemas.LessonResponse, error)); ok {
		return rf(chapterID, courseID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []schemas.LessonResponse); ok {
		r0 = rf(chapterID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schemas.LessonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(chapterID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: courseID, chapterID, id
func (_m *LessonRepositoryInterface) GetByID(courseID uint, chapterID uint, id uint) (models.Lesson, error) {
	ret := _m.Called(courseID, chapterID, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) (models.Lesson, error)); ok {
		return rf(courseID, chapterID, id)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) models.Lesson); ok {
		r0 = rf(courseID, chapterID, id)
	} else {
		r0 = ret.Get(0).(models.Lesson)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(courseID, chapterID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: lesson
func (_m *LessonRepositoryInterface) Update(lesson models.Lesson) error {
	ret := _m.Called(lesson)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Lesson) error); ok {
		r0 = rf(lesson)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLessonRepositoryInterface creates a new instance of LessonRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLessonRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LessonRepositoryInterface {
	mock := &LessonRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
